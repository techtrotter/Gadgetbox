"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useAsync = exports.useIsMounted = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */
const react_1 = require("react");
const useIsMounted = () => {
    const isMounted = (0, react_1.useRef)(true);
    (0, react_1.useEffect)(() => () => {
        isMounted.current = false;
    }, []);
    return isMounted;
};
exports.useIsMounted = useIsMounted;
const useAsync = (cb, deps = [], delayCall = false) => {
    const [data, setData] = (0, react_1.useState)(null);
    const [loading, setLoading] = (0, react_1.useState)(false);
    const [error, setError] = (0, react_1.useState)(null);
    // eslint-disable-next-line react-hooks/exhaustive-deps
    const callBack = (0, react_1.useCallback)((...args) => cb(...args), [...deps, cb]);
    const isMountedRef = (0, exports.useIsMounted)();
    const fetchData = (0, react_1.useCallback)((...args) => __awaiter(void 0, void 0, void 0, function* () {
        var _a;
        setLoading(true);
        try {
            const result = yield callBack(...args);
            if (!isMountedRef.current)
                return;
            setData(result);
        }
        catch (error) {
            if (!isMountedRef.current)
                return;
            if (error instanceof Error) {
                setError(error);
                return;
            }
            setError(new Error(((_a = error) === null || _a === void 0 ? void 0 : _a.message) || 'Unknown error'));
        }
        finally {
            if (isMountedRef.current) {
                setLoading(false);
            }
        }
    }), [callBack, isMountedRef]);
    const fetchDataRef = (0, react_1.useRef)(fetchData);
    (0, react_1.useEffect)(() => {
        fetchDataRef.current = fetchData;
    }, [fetchData]);
    (0, react_1.useEffect)(() => {
        if (!delayCall) {
            fetchDataRef.current();
        }
    }, [delayCall]);
    return { loading, data, error, call: fetchData };
};
exports.useAsync = useAsync;
//# sourceMappingURL=useAsync.js.map